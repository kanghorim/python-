#클래스 정의
class Product :
    def __init__(self, name, price) :
        #멤버변수(인스턴스변수) 선언 및 초기화
        self.name = name
        self.price = price
        
   
    def __str__(self) :
        #Product클래스로부터 생성된 객체의 상태를 표현하는 문자열 리턴
        return "{0:<3}\t{1}".format(self.name, self.price)


#클래스 정의
class ShoppingBiz :
    #cart는 Product객체가 key, 구입개수  정수가 value로 저장되어 있는 dict객체
    def __init__(self, cart ) :     
        #파라미터로 전달받은 dict객체 cart를 멤버변수 cart에 할당 초기화
        self.cart = cart

    def printAllProducts(self):
        #장바구니에 담겨진 상품 정보와 구입개수 출력하는 메서드
        for idx, (k, v) in enumerate(cart.items()):
            print("  {0}.  {1}\t{2}개".format(idx+1 ,k, v))


    def calculateTotalByProduct(self, product, count):
    #상품객체와 구입개수를 파라미터로 전달받아 해당 상품의 총 구매 가격을 리턴 
        return product.price * count


    def printPricePerProduct(self):
        #장바구니에 담겨진 상품별 구매 가격 출력하는 메서드
        print("--------------------------------")
        for idx, (k, v) in enumerate(cart.items()):
            print("{0}.{1} : {2}원".format(idx+1 ,k.name, self.calculateTotalByProduct(k, v)))
        print("--------------------------------")


    def calculateTotalPrice(self):
        ##장바구니에 담겨진 모든  상품의 총 구매 가격 리턴하는 메서드 
        total = 0
        for k, v in cart.items():
            total+=self.calculateTotalByProduct(k, v)   
        print("총 구입 가격 :", total, "원")



class CommonUtil :
    @staticmethod
    def getUserInput() :
        #사용자로부터 키보드 입력을 받아서 리턴하는 메서드
        return input('')
   
    @staticmethod
    def printHead() :
        #정보 출력할때 heading만 출력하는 메서드
        print("--------------------------------")
        print("순번  품목명   단가  구입개수")
        print("--------------------------------")


    @staticmethod
    def printTail() :
        #모든 정보 출력후 밑줄 출력하는 메서드
        print("--------------------------------")

    @staticmethod
    def printMenu() :
        #메뉴 출력하는 메서드
        print("===== << 메뉴 >> =====")
        print("1.장바구니 목록 출력 ")
        print("2.품목별 가격 출력")
        print("3.총 구입 가격 출력")       
        print("9.종료 ")        
        print("====================== ")



cart = {
    Product('사과', 1500) : 6,
    Product('라면', 1200) : 3,
    Product('식용유', 3500) : 1,
    Product('과자', 2400) : 5
}    
biz = ShoppingBiz(cart)

while True :
    CommonUtil.printMenu()
    print("## 메뉴 입력:", end=" ")
    try :
        menu = int( CommonUtil.getUserInput())
        if menu == 9 :        
            print("프로그램을 종료합니다. Bye~ Bye~")       
            break
        elif menu == 1 :  
    	CommonUtil.printHead()
	biz.printAllProducts()
	CommonUtil.printTail()
        elif menu == 2 : 
            biz.printPricePerProduct()
        elif menu == 3 : 
            biz.calculateTotalPrice()
     except ValueError as e:      
            print("[에러]메뉴를 잘못 입력하였습니다.")


#파일과 디렉토리 다루기 - os, shutil 라이브러리
#코드 연습

exercise1>
마름모를 별 모양으로 출력하는  프로그램 코드를 작성하시오  
[Sample Run]  
           ★ 
        ★★★ 
     ★★★★★  
   ★★★★★★★ 
★★★★★★★★★
  ★★★★★★★ 
     ★★★★★ 
        ★★★ 
           ★ 


i, k  = 0, 0 
while i < 9 :
    if i<5 :
        k = 0
        while k < 4 -i:
            print('  ', end=' ')
            k +=1
        k=0
        while k < i*2 +1:
            print('\u2605', end=' ')
            k +=1   
    else :
        k = 0
        while k < i - 4 :
            print('  ', end=' ')
            k +=1
        k=0
        while k < (9-i) * 2 -1:
            print('\u2605', end=' ')
            k +=1   
    print()
    i += 1

exercise2> 사용자가 숫자를 여러 개 입력하면 하트 모양을 입력한 숫자만큼 출력하는  프로그램 코드를 작성하시오  
[Sample Run]  
숫자를 여러 개 입력하세요 : 5914
♥♥♥♥♥
♥♥♥♥♥♥♥♥♥
♥
♥♥♥♥


str_num = input("숫자를 여러 개 입력하세요 :")
for n in str_num :
    for i in range(int(n)):
        print("♥", end="")
    print()





exercise3>입력한 문자열에서 숫자, 영문 대.소문자, 한글, 기타 문자의 개수를 세는 프로그램을 작성하시오
[Sample Run]  
문자열을 입력하세요 : Machine Learning을 위한 파이썬을 공부하고 있습니다. ^___^
대문자 : 2  소문자 : 13  숫자 : 0  한글 : 15  기타 : 12

#chr()은 양의 정수를 인수로 받아서 (정수에 매핑되어 있는 문자)유니코드 문자 반환
#ord()은 문자를 인수로 받아서 (매핑되어 있는) 유니코드 값을 반환

## 전역 변수 선언 부분
numCnt, lowerCnt, upperCnt, hanCnt, etcCnt = [0] * 5
ch = ""

## 메인(main) 코드 부분
inStr = input("문자열을 입력하세요 : ")

for ch in inStr :
    if ( ord(ch) >= ord("A") and ord(ch) <= ord("Z")) :
        upperCnt += 1
    elif ( ord(ch) >= ord("a") and ord(ch) <= ord("z")) :
        lowerCnt += 1
    elif ( ord(ch) >= ord("0") and ord(ch) <= ord("9")) :
        numCnt += 1
    elif ( ord(ch) >= ord("가") and ord(ch) <= ord("힣")) :
        hanCnt += 1
    else :
        etcCnt += 1

print("대문자 :", upperCnt, " 소문자:", lowerCnt, " 숫자:", numCnt, " 한글:", hanCnt, " 기타:", etcCnt)



exercise4>긴 장문에서 각 문자의 발생 빈도를 센다. 출력은 빈도수가 높은 글자부터 출력한다. 단 한글만 빈도수를 세고 나머지 글자들은 무시한다. 
[Sample Run] 
원문 
내가 그의 이름을 불러주기 전에는 그는 다만 하나의 몸짓에 지나지 않았다.
내가 그의 이름을 불러주었을 때, 그는 내게로 와 꽃이 되었다
내가 그의 이름을 불러준 것처럼 나의 이 빛깔과 향기에 알맞은 누가 나의 이름을 불러다오.
그에게로 가서 나도 그의 꽃이 되고 싶다.
우리들은 모두 무엇이 되고 싶다.
나는 너에게 너는 나에게 잊혀지지 않는 하나의 눈짓이 되고 싶다
-------------------------------------
문자              빈도수
-------------------------------------
이                9
의                8
나                8
그                7
......

#문자와 빈도수를 dict 객체로 생성
#dict에 저장된 value로 내림차순 정렬 (1227수업내용)

inStr = ''' 내가 그의 이름을 불러주기 전에는 그는 다만 하나의 몸짓에 지나지 않았다.
내가 그의 이름을 불러주었을 때, 그는 내게로 와 꽃이 되었다
내가 그의 이름을 불러준 것처럼 나의 이 빛깔과 향기에 알맞은 누가 나의 이름을 불러다오.
그에게로 가서 나도 그의 꽃이 되고 싶다.
우리들은 모두 무엇이 되고 싶다.
나는 너에게 너는 나에게 잊혀지지 않는 하나의 눈짓이 되고 싶다 '''
countDic = { }
countList = [ ]

for ch in inStr :
    if '가' <=ch and ch <='힝' :
        if ch in countDic :
            countDic[ch] += 1
        else :
            countDic[ch] = 1

#print(countDic)

#print('원문\n', inStr)
print('--------------------------------------')
print('문자\t빈도수' )
print('--------------------------------------')

#dict의 value를 기준으로 내림차순 정렬
desc_word_list =sorted(countDic.items(), key=lambda item : item[1], reverse=True) 
print(type(desc_word_list ))
for item  in   desc_word_list :
     print(item[0], "\t", item[1])



exercise5> 딕셔너리를 활용해 음식 궁합을 출력하는  프로그램 코드를 작성하시오  
음식을 종류별로 여러 개 출력 한 후 이 중 좋아하는 음식을 입력하면 궁합에 맞는 음식을 출력한다.
목록에 없는 음식을 입력하면 '없다'는 메시지를 출력하고, '끝'을 입력하면 프로그램을 종료한다.
[Sample Run]  
[떡볶이, 짜장면, 라면, 피자, 맥주, 치킨, 삼겹살] 중 좋아하는 음식은? 치킨
<치킨> 궁합 음식은 <치킨무> 입니다.
[떡볶이, 짜장면, 라면, 피자, 맥주, 치킨, 삼겹살] 중 좋아하는 음식은? 라면
<라면> 궁합 음식은 <김치> 입니다.
[떡볶이, 짜장면, 라면, 피자, 맥주, 치킨, 삼겹살] 중 좋아하는 음식은? 짬뽕
그런 음식이 없습니다. 확인해 보세요
[떡볶이, 짜장면, 라면, 피자, 맥주, 치킨, 삼겹살] 중 좋아하는 음식은? 끝

foods = { "떡볶이": "오뎅",
             "짜장면":"단무지", 
             "라면" : "김치",
             "피자" : "피클",
             "맥주" : "땅콩", 
             "치킨" : 치킨무", 
             "삼겹살" : "상추" } 


while (True) :
    myfood = input(str(list(foods.keys())) +" 중 좋아하는 음식은? ")
    if myfood in foods :
        print("<%s> 궁합 음식은 <%s> 입니다. " % (myfood, foods.get(myfood)))
    elif myfood =="끝" :
        break
    else :
        print("그런 음식이 없습니다. 확인해 보세요")

exercise6>물건을 수송하는 기차 여러 대의 수송량을 합산해 순위를 매기는 프로그램이다.
예들 들어 각 기차의 수송량 목록이 (토마스 5톤), (제임스 4톤), (토마스 2톤) 등으로 되어 있다면 이 목록의 합계를 내서 [토마스 7톤 1등] [ 제임스 4톤 2등] 이 출력되도록 한다. 또 같은 순위가 여러번 나오면 같은 순위만큼 건너뛰고 다음 순위를 출력한다.
예로 1등, 2등, 2등, 4등,...방식으로 3등은 건너뛰고 출력한다.
[Sample Run]  
기차 수송량 목록 ==> [('토마스', 5), ('헨리', 8), ('에드워드', 9), ('에밀리', 5), ('토마스', 4), ('헨리', 7), ('토마스', 3), ('에밀리', 8), ('퍼시', 5), ('고든', 13)]
--------------------------------------
기차          총수송량    순위
-------------------------------------
헨리                 15         1
에밀리              13         2
고든                 13         2
토마스              12         4
에드워드            9          5
퍼시                  5          6


trainTupleList =  [('토마스', 5), ('헨리', 8), ('에드워드', 9), ('에밀리', 5), ('토마스', 4), ('헨리', 7), ('토마스', 3), ('에밀리', 8), ('퍼시', 5), ('고든', 13)]
trainDic, trainList = {}, [] 
totalRank, currentRank =1, 1

for tmpTup in trainTupleList :
    tName = tmpTup[0]
    tWeight = tmpTup[1]
    if tName in trainDic :
        trainDic[tName] += tWeight    #dict객체에 추가
    else :
        trainDic[tName] =tWeight
        
print('기차 수송량 목록 ==> ', trainTupleList )


trainList = sorted(trainDic.items(), key=lambda item : item[1],  reverse = True)
print('--------------------------------------')    
print("기차\t총수송량    순위")
print('--------------------------------------')
 
for i in range(len( trainList))  :    
    if trainList[i][1] ==trainList[i-1][1] :
        pass
    else :
        currentRank = totalRank
    print("{0:<4}    {1:>2}     {2:>2} ".format(trainList[i][0] ,    trainList[i][1],  currentRank))
    totalRank += 1


##############################################
Python기반의 Process Automation :  파일,  폴더 관리 자동화
- 파일명 변경, 폴더 옮기기, 파일 분류  등 파일에 관한 작업을 자동화
- os : 운영체제와 관련된 함수, 클래스 등을 제공 라이브러리 (파일, 폴더와 관련된 함수 , 클래스 포함)
- shutil : 파일, 폴더와 관련된 함수 , 클래스 제공 라이브러리
- glob 모듈 :  디렉터리 와일드카드 검색으로 파일 목록을 만드는 함수를 제공합니다


import glob
glob.glob('*.py')   #작업디렉토리 workspace


#os.listdir(directory_path) : 인수로 전달한 디렉토리 아래 저장된 파일 목록들을 반환
import os

for fname in os.listdir('c:\\workspace'):
    print(fname)


#os.walk() : 디렉토리의 하위 디렉토리의 트리 구조를 재귀적으로 검색 수행,  디렉토리 목록, 파일 목록 반환

import os
for (curdir, dirs, files) in os.walk('.'):
    print('current directory=', curdir)
    print('directorys=', dirs[:])   #디렉토리 목록 출력
    print('filess=', files[:])     #파일  목록 출력
    print('-'*60)


# os.path.isfile(path) - 일반 파일인지 검사
# os.path.isdir(path) - 디렉토리인지 검사
# os.path.exists(path) - 경로의 파일이 존재하는지 검사
# os.path.getsize(path) - 파일의 크기 확인
# os.access(path, 검사할 권한) - F_OK(파일 존재 검사), R_OK(읽기 권한 검사), W_OK(쓰기 권한 검사), X_OK(실행 권한검사)

import os
fpath = "C:\\Windows\\notepad.exe"
print(os.path.isfile(fpath)) 		# 일반 파일인지를 검사한다
print(os.path.isdir(fpath)) 		# 디렉토리인지 검사한다
print(os.path.exists(fpath)) 	# 주어진 경로의 파일이 존재하는지 검사한다
print(os.path.getsize(fpath)) 	# 파일의 크기를 얻는다
print(os.access(fpath, os.X_OK))	# 파일의 실행 권한을 확인해본다.


#os.path.getctime(path)- 파일 생성 시간 반환
#os.path.getmtime(path) - 파일 수정 시간 반환
#os.path.getatime(path) - 파일 접근 시간 반환
#os.utime(paht, (atime, mtime)) - 파일의 수정 시간과 접근 시간을 

createtime = os.path.getctime('.\Day10.ipynb')
mtime = os.path.getmtime('.\Day10.ipynb')
atime = os.path.getatime('.\Day10.ipynb')
print(createtime, mtime, atime)

import time
print(time.localtime(createtime))
print(time.strftime('%Y-%m-%d', time.localtime(createtime)))
print(time.strftime('%c', time.localtime(createtime)))    # %c는 날짜와 시간을 함께 출력
 

#os.rename(old, new) - 파일 혹은 디렉토리의 이름 변경
#os.remove(path) - 파일 삭제
#os.mkdir( name ) - 새로운 디렉토리 생성
#os.makedirs() - 중간경로를 포함한 디렉토리 생성

#shutil모듈.copy(path, path) - 디렉토리 복사
#shutil모듈.copyfile(path, path) - 파일 복사
#shutil모듈.copytree(path, path) - 디렉토리 통째로 복사

import os
os.mkdir('temp')
os.rename('test.py', './temp/test.py')  #파일 이동
os.rename('roboadvisor', './temp/roboadvisor')  #디렉토리 이동


import shutil
os.rename('./temp/test.py', './test.py', )  #파일 이동

shutil.copyfile('test.py', './temp/test2.py')  #파일 복사

shutil.copytree('./temp/roboadvisor',  './roboadvisor')   #디렉토리 복사

os.remove('./temp/test2.py')

shutil.rmtree('temp')

#os.removedirs(path) - 여러 단계의 디렉토리 삭제, 디렉토리가 비어 있으면 삭제하지 않고 중단된다
os.makedirs('./data/img/apple')

shutil.copyfile('test.py', './data/img/apple/test2.py')  #파일 복사
shutil.copyfile('test.py', './data/img/apple/test.py')  #파일 복사

os.removedirs('./data/img/apple')   #디렉토리 내부에 파일이 존재하지 않아야 함




################################################################
# 폴더가 없으면 폴더를 생성한다
if not os.path.exists('test'):
    os.mkdir('test')

for k in range(20):
    fname = 'test/py_a_a_{}.txt'.format(k)
    open(fname, 'w').write(fname + ' testing...')  #writelines()
    print('creating..', fname)



#파일 이름 일괄 변경 예] py_a_a_1.txt => py_a_a_001.txt

#파일명을 경로, 파일명 전체, 파일명 앞부분, 확장자로 분리하여 네가지 값을 튜플로 반환하는 함수 정의

def split_file_path(fpath):
    folder, fname = os.path.split(fpath)  #경로로부터 디렉토리, 파일을 분리
    head, tail = os.path.splitext(fname)  #파일이름과 확장자 부리
    return folder, fname, head, tail

item = split_file_path('c:\workspace\test\py_a_a_1.txt')
print(item)

head = 'py_a_a_19'
fname_list = head.split('_')
print(fname_list)   #[py, a, a, 1]

fname_list[-1] = '{:03d}'.format(int(fname_list[-1]))
print(fname_list)   #[py, a, a, 001]
print('_'.join(fname_list))


# py_a_a_로 시작하는 파일의 list를 glob.glob()을 사용해 받아옴
target_string = "py_a_a_"
target_list = glob.glob("./test/" + target_string + "*.txt")

for t in target_list:
    # 위에서 정의한 함수의 return값을 4개의 변수에 저장
    fdir, name, head, tails = split_file_path(t) 
    # 파일의 이름을 "_" 기준으로 나눈 후 list로 반환
    head_split = head.split("_") 
    # 반환된 list의 마지막 요소의 형식 변경
    head_split[-1] = "{:03d}".format(int(head_split[-1])) 
    # 변경한 부분을 포함한 list를 하나의 문자열로 합침
    temp = "_".join(head_split) 
    result = fdir + "\\" + temp + tails 		# 경로\이름.확장자
    os.rename(t, result) 		# 이름 변경
    print(t,"-->",result)


##############################################
#Tkinter 라이브러리 - GUI 응용 프로그램에서 사용되는 버튼, 레이블 및 텍스트 상자와 같은 다양한 컨트롤을 제공
#wxPython  라이브러리 - GUI 
#PyQt 라이브러리 - GUI 


import tkinter
window = tkinter.Tk()   #화면을 구성 객체
window.title("윈도 창 연습")
window.geometry("400x100")
window.resizable(width = False, height = False)

window.mainloop()



from tkinter import *
window = Tk()   
label1 = Label(window, text ="GUI python은 ")
label2 = Label(window, text ="맛보기용  ", font=("궁서체", 30), fg="blue")
label3 = Label(window, text ="공부해보세요 ", bg="yellow", width=20, height=5, anchor=SE)

label1.pack()
label2.pack()
label3.pack()
window.mainloop()


from tkinter import *
window = Tk() 
button1 = Button(window, text = "파이썬 종료", fg = "red", command = quit)
button1.pack()
window.mainloop()


from tkinter import *
from tkinter import messagebox

## 함수 선언 부분 ##
def myFunc() :
    messagebox.showinfo("강아지 버튼", "강아지가 귀엽죠? ^^")

## 메인 코드 부분 ##
window = Tk()
photo = PhotoImage(file = "./gif/dog6.gif")
button1 = Button(window, image = photo, command = myFunc)
button1.pack()
window.mainloop()


from tkinter import *
from tkinter import messagebox
window = Tk()

def  myFunc() :
    if chk.get() == 0 :
        messagebox.showinfo("", "체크버튼이 꺼졌어요.")
    else :
        messagebox.showinfo("", "체크버튼이 켜졌어요.")
    

chk = IntVar()
cb1 = Checkbutton(window, text = "클릭하세요", variable = chk, command = myFunc)

cb1.pack()

window.mainloop()




window = Tk()

def  myFunc() :
    if var.get() == 1 :
        label1.configure(text = "파이썬")
    elif var.get() == 2 :
        label1.configure(text = "C++")
    else :
        label1.configure(text = "Java")
var = IntVar()
rb1 = Radiobutton(window, text = "파이썬", variable = var, value = 1, command = myFunc)
rb2 = Radiobutton(window, text = "C++", variable = var, value = 2, command = myFunc)
rb3 = Radiobutton(window, text = "Java", variable = var, value = 3, command = myFunc)

label1 = Label(window, text="선택한 언어 : ", fg="red")

rb1.pack()
rb2.pack()
rb3.pack()
label1.pack()

window.mainloop()






####################################################################
exercise6> 객체지향 프로그래밍 개념을 이용하여 노트북 프로그램 만들기
- Note를 정리하는 프로그램이다.
- 사용자는 Note에 콘텐츠를 적을 수 있다
- Note는 Notebook에 삽입된다.
- Note는 Title이 있다
- Notebook은 Note가 삽입될 때 페이지를 생성하며, 최대 300 페이지까지 저장할 수 있다
- 300페이지를 넘기면 Note를 더는 삽입하지 못한다.


#Note클래스에 아래의 메서드외에 필요한 메서드는 더 추가해서 구현합니다.
class Note :
    def __init__(self, contents):
        pass
    def write_content(self, content):
        pass
    def remove_all(self):
        pass


#Notebook클래스에 아래의 메서드외에 필요한 메서드는 더 추가해서 구현합니다.
class Notebook :
    def __init__(self, notes, title, page_number):
        pass
    def add_note(self, note):
        pass
    def remove_note(self, note):
        pass
    def get_number_of_pages (self):
        pass